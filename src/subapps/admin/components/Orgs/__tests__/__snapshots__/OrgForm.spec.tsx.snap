// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Organisation Form component should render correctly 1`] = `
<OrgForm>
  <Spin
    size="default"
    spinning={false}
    wrapperClassName=""
  >
    <div
      className="ant-spin-nested-loading"
    >
      <div
        className="ant-spin-container"
        key="container"
      >
        <ForwardRef(InternalForm)
          onFinish={[Function]}
        >
          <SizeContextProvider>
            <ForwardRef(Form)
              className="ant-form ant-form-horizontal"
              form={
                Object {
                  "__INTERNAL__": Object {
                    "itemRef": [Function],
                    "name": undefined,
                  },
                  "getFieldError": [Function],
                  "getFieldInstance": [Function],
                  "getFieldValue": [Function],
                  "getFieldsError": [Function],
                  "getFieldsValue": [Function],
                  "getInternalHooks": [Function],
                  "isFieldTouched": [Function],
                  "isFieldValidating": [Function],
                  "isFieldsTouched": [Function],
                  "isFieldsValidating": [Function],
                  "resetFields": [Function],
                  "scrollToField": [Function],
                  "setFields": [Function],
                  "setFieldsValue": [Function],
                  "submit": [Function],
                  "validateFields": [Function],
                }
              }
              onFinish={[Function]}
              onFinishFailed={[Function]}
            >
              <form
                className="ant-form ant-form-horizontal"
                onReset={[Function]}
                onSubmit={[Function]}
              >
                <FormItem
                  initialValue=""
                  label="Label"
                  labelCol={
                    Object {
                      "sm": Object {
                        "span": 5,
                      },
                      "xs": Object {
                        "span": 24,
                      },
                    }
                  }
                  name="label"
                  rules={
                    Array [
                      Object {
                        "message": "Label must be a phrase without spaces",
                        "pattern": /\\^\\\\S\\+\\$/g,
                        "required": true,
                        "whitespace": true,
                      },
                    ]
                  }
                  wrapperCol={
                    Object {
                      "sm": Object {
                        "span": 19,
                      },
                      "xs": Object {
                        "span": 24,
                      },
                    }
                  }
                >
                  <WrapperField
                    initialValue=""
                    label="Label"
                    labelCol={
                      Object {
                        "sm": Object {
                          "span": 5,
                        },
                        "xs": Object {
                          "span": 24,
                        },
                      }
                    }
                    messageVariables={
                      Object {
                        "label": "Label",
                      }
                    }
                    name="label"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Label must be a phrase without spaces",
                          "pattern": /\\^\\\\S\\+\\$/g,
                          "required": true,
                          "whitespace": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                    wrapperCol={
                      Object {
                        "sm": Object {
                          "span": 19,
                        },
                        "xs": Object {
                          "span": 24,
                        },
                      }
                    }
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": undefined,
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      initialValue=""
                      key="_label"
                      label="Label"
                      labelCol={
                        Object {
                          "sm": Object {
                            "span": 5,
                          },
                          "xs": Object {
                            "span": 24,
                          },
                        }
                      }
                      messageVariables={
                        Object {
                          "label": "Label",
                        }
                      }
                      name={
                        Array [
                          "label",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Label must be a phrase without spaces",
                            "pattern": /\\^\\\\S\\+\\$/g,
                            "required": true,
                            "whitespace": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                      wrapperCol={
                        Object {
                          "sm": Object {
                            "span": 19,
                          },
                          "xs": Object {
                            "span": 24,
                          },
                        }
                      }
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="label"
                            initialValue=""
                            label="Label"
                            labelCol={
                              Object {
                                "sm": Object {
                                  "span": 5,
                                },
                                "xs": Object {
                                  "span": 24,
                                },
                              }
                            }
                            name="label"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Label must be a phrase without spaces",
                                  "pattern": /\\^\\\\S\\+\\$/g,
                                  "required": true,
                                  "whitespace": true,
                                },
                              ]
                            }
                            wrapperCol={
                              Object {
                                "sm": Object {
                                  "span": 19,
                                },
                                "xs": Object {
                                  "span": 24,
                                },
                              }
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              sm={
                                Object {
                                  "span": 5,
                                }
                              }
                              xs={
                                Object {
                                  "span": 24,
                                }
                              }
                            >
                              <div
                                className="ant-col ant-form-item-label ant-col-xs-24 ant-col-sm-5"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="label"
                                  title="Label"
                                >
                                  Label
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            initialValue=""
                            label="Label"
                            labelCol={
                              Object {
                                "sm": Object {
                                  "span": 5,
                                },
                                "xs": Object {
                                  "span": 24,
                                },
                              }
                            }
                            name={
                              Array [
                                "label",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Label must be a phrase without spaces",
                                  "pattern": /\\^\\\\S\\+\\$/g,
                                  "required": true,
                                  "whitespace": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                            wrapperCol={
                              Object {
                                "sm": Object {
                                  "span": 19,
                                },
                                "xs": Object {
                                  "span": 24,
                                },
                              }
                            }
                          >
                            <Col
                              className="ant-form-item-control"
                              sm={
                                Object {
                                  "span": 19,
                                }
                              }
                              xs={
                                Object {
                                  "span": 24,
                                }
                              }
                            >
                              <div
                                className="ant-col ant-form-item-control ant-col-xs-24 ant-col-sm-19"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value=""
                                    >
                                      <Input
                                        disabled={false}
                                        id="label"
                                        onChange={[Function]}
                                        placeholder="Label"
                                        type="text"
                                        value=""
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          disabled={false}
                                          element={
                                            <input
                                              className="ant-input"
                                              disabled={false}
                                              id="label"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Label"
                                              type="text"
                                              value=""
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          id="label"
                                          inputType="input"
                                          onChange={[Function]}
                                          placeholder="Label"
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <input
                                            className="ant-input"
                                            disabled={false}
                                            id="label"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="Label"
                                            type="text"
                                            value=""
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="ant-show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  initialValue=""
                  label="Description"
                  labelCol={
                    Object {
                      "sm": Object {
                        "span": 5,
                      },
                      "xs": Object {
                        "span": 24,
                      },
                    }
                  }
                  name="description"
                  rules={
                    Array [
                      Object {
                        "required": false,
                      },
                    ]
                  }
                  wrapperCol={
                    Object {
                      "sm": Object {
                        "span": 19,
                      },
                      "xs": Object {
                        "span": 24,
                      },
                    }
                  }
                >
                  <WrapperField
                    initialValue=""
                    label="Description"
                    labelCol={
                      Object {
                        "sm": Object {
                          "span": 5,
                        },
                        "xs": Object {
                          "span": 24,
                        },
                      }
                    }
                    messageVariables={
                      Object {
                        "label": "Description",
                      }
                    }
                    name="description"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "required": false,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                    wrapperCol={
                      Object {
                        "sm": Object {
                          "span": 19,
                        },
                        "xs": Object {
                          "span": 24,
                        },
                      }
                    }
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": undefined,
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      initialValue=""
                      key="_description"
                      label="Description"
                      labelCol={
                        Object {
                          "sm": Object {
                            "span": 5,
                          },
                          "xs": Object {
                            "span": 24,
                          },
                        }
                      }
                      messageVariables={
                        Object {
                          "label": "Description",
                        }
                      }
                      name={
                        Array [
                          "description",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "required": false,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                      wrapperCol={
                        Object {
                          "sm": Object {
                            "span": 19,
                          },
                          "xs": Object {
                            "span": 24,
                          },
                        }
                      }
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="description"
                            initialValue=""
                            label="Description"
                            labelCol={
                              Object {
                                "sm": Object {
                                  "span": 5,
                                },
                                "xs": Object {
                                  "span": 24,
                                },
                              }
                            }
                            name="description"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "required": false,
                                },
                              ]
                            }
                            wrapperCol={
                              Object {
                                "sm": Object {
                                  "span": 19,
                                },
                                "xs": Object {
                                  "span": 24,
                                },
                              }
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              sm={
                                Object {
                                  "span": 5,
                                }
                              }
                              xs={
                                Object {
                                  "span": 24,
                                }
                              }
                            >
                              <div
                                className="ant-col ant-form-item-label ant-col-xs-24 ant-col-sm-5"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="description"
                                  title="Description"
                                >
                                  Description
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            initialValue=""
                            label="Description"
                            labelCol={
                              Object {
                                "sm": Object {
                                  "span": 5,
                                },
                                "xs": Object {
                                  "span": 24,
                                },
                              }
                            }
                            name={
                              Array [
                                "description",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "required": false,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                            wrapperCol={
                              Object {
                                "sm": Object {
                                  "span": 19,
                                },
                                "xs": Object {
                                  "span": 24,
                                },
                              }
                            }
                          >
                            <Col
                              className="ant-form-item-control"
                              sm={
                                Object {
                                  "span": 19,
                                }
                              }
                              xs={
                                Object {
                                  "span": 24,
                                }
                              }
                            >
                              <div
                                className="ant-col ant-form-item-control ant-col-xs-24 ant-col-sm-19"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value=""
                                    >
                                      <Input
                                        id="description"
                                        onChange={[Function]}
                                        placeholder="Description"
                                        type="text"
                                        value=""
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <input
                                              className="ant-input"
                                              id="description"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Description"
                                              type="text"
                                              value=""
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          id="description"
                                          inputType="input"
                                          onChange={[Function]}
                                          placeholder="Description"
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <input
                                            className="ant-input"
                                            id="description"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="Description"
                                            type="text"
                                            value=""
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="ant-show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  wrapperCol={
                    Object {
                      "sm": Object {
                        "offset": 5,
                        "span": 19,
                      },
                      "xs": Object {
                        "offset": 0,
                        "span": 24,
                      },
                    }
                  }
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        prefixCls="ant-form"
                        requiredMark={true}
                        wrapperCol={
                          Object {
                            "sm": Object {
                              "offset": 5,
                              "span": 19,
                            },
                            "xs": Object {
                              "offset": 0,
                              "span": 24,
                            },
                          }
                        }
                      />
                      <FormItemInput
                        errors={Array []}
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                        wrapperCol={
                          Object {
                            "sm": Object {
                              "offset": 5,
                              "span": 19,
                            },
                            "xs": Object {
                              "offset": 0,
                              "span": 24,
                            },
                          }
                        }
                      >
                        <Col
                          className="ant-form-item-control"
                          sm={
                            Object {
                              "offset": 5,
                              "span": 19,
                            }
                          }
                          xs={
                            Object {
                              "offset": 0,
                              "span": 24,
                            }
                          }
                        >
                          <div
                            className="ant-col ant-form-item-control ant-col-xs-24 ant-col-xs-offset-0 ant-col-sm-19 ant-col-sm-offset-5"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Button
                                  htmlType="submit"
                                  type="primary"
                                >
                                  <Wave>
                                    <button
                                      className="ant-btn ant-btn-primary"
                                      onClick={[Function]}
                                      type="submit"
                                    >
                                      <LoadingIcon
                                        existIcon={false}
                                        loading={false}
                                        prefixCls="ant-btn"
                                      >
                                        <CSSMotion
                                          motionName="ant-btn-loading-icon-motion"
                                          onAppearActive={[Function]}
                                          onAppearStart={[Function]}
                                          onEnterActive={[Function]}
                                          onEnterStart={[Function]}
                                          onLeaveActive={[Function]}
                                          onLeaveStart={[Function]}
                                          removeOnLeave={true}
                                          visible={false}
                                        >
                                          <DomWrapper />
                                        </CSSMotion>
                                      </LoadingIcon>
                                      <span
                                        key=".0"
                                      >
                                        Create
                                      </span>
                                    </button>
                                  </Wave>
                                </Button>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="ant-show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
              </form>
            </ForwardRef(Form)>
          </SizeContextProvider>
        </ForwardRef(InternalForm)>
      </div>
    </div>
  </Spin>
</OrgForm>
`;
