name: Review

on: [pull_request]

jobs:
  test-and-build:
    runs-on: it

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'
      - name: Prune containers
        run: |
          docker system prune -af
      - name: install dependencies ðŸš€
        run: |
          yarn install --frozen-lockfile # optional, --immutable
      - name: linting âœ¨
        run: |
          yarn lint
      - name: style ðŸ’…
        run: |
          yarn style
      - name: running test ðŸ›«ðŸ›¬
        run: |
          yarn test --coverage src
      - name: upload coverage to Codecov ðŸ’Œ
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: build fusion docker image
        run: |
          docker build . --tag=nexus-web:fresh
      - name: Start services
        run: docker-compose -f ci/docker-compose.yml up -d && sleep 120
      - name: Copy nexus-web into Cypress container
        # avoids permission issue where cypress writes screenshots to host with root as user
        # which we can't then delete easily
        run: docker cp ./. cypress:/e2e
      - name: see fusion results
        run: | 
          docker-compose -f ci/docker-compose.yml logs fusion delta
          docker-compose ps
      - name: Check application availability
        run: |
          # Enable error tracing and printing
          set -e
          set -x

          # Test the availability of the application
          if curl --fail http://fusion.test:8000; then
            echo "Application is available"
          else
            echo "Application is not available"
            exit 1
          fi
      - name: e2e tests
        run: echo | docker exec -t cypress cypress run --config-file cypress.config.ts --browser chrome --record --key ${{ secrets.CYPRESS_RECORD_KEY }}
      - name: Stop Docker
        if: ${{ always() }}
        run: docker-compose -f ci/docker-compose.yml down && sleep 60
      - name: Cleanup Docker Containers
        if: ${{ always() }}
        run: |
          if [ -n "$(docker ps -aq)" ]; then
            docker rm -f $(docker ps -aq)
          fi
          for container in `docker images | grep none | awk '{print $3}'`; do
            echo "Deleting container: $container";
            docker rmi $container;
          done
